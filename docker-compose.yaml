services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: app
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d app"]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  api-go:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      PORT: "8080"
      # DATABASE_URL: postgres://postgres:postgres@db:5432/app?sslmode=disable
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    read_only: true
    tmpfs: ["/tmp"]
    security_opt:
      - no-new-privileges:true

  api-py:
    build:
      context: ./pyservice
      dockerfile: Dockerfile
    environment:
      PORT: "8000"
      PYTHONUNBUFFERED: "1"
      # DATABASE_URL: postgres://postgres:postgres@db:5432/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    read_only: true
    tmpfs: ["/tmp"]
    security_opt:
      - no-new-privileges:true

  migrate:
    image: migrate/migrate:v4.17.1
    command: ["-path", "/migrations", "-database", "${DATABASE_URL}?sslmode=disable", "up"]
    volumes:
      - ./db/migrations:/migrations:ro
    environment:
      # Fallback så CI inte får "error: no scheme"
      DATABASE_URL: ${DATABASE_URL:-postgres://postgres:postgres@db:5432/app}
    depends_on:
      db:
        condition: service_healthy
    restart: "on-failure"

volumes:
  db_data:
