services:
  # Postgres – databas
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: app
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d app"]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # Go-API – din befintliga app
  api-go:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      PORT: "8080"
      # Sätt denna via .env om du vill koppla DB i appen:
      # DATABASE_URL: postgres://postgres:postgres@db:5432/app?sslmode=disable
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy

  # Python-API – FastAPI
  api-py:
    build:
      context: ./pyservice
      dockerfile: Dockerfile
    environment:
      PORT: "8000"
      PYTHONUNBUFFERED: "1"
      # DATABASE_URL: postgres://postgres:postgres@db:5432/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy

  # Migrations – kör SQL-migreringar idempotent
  migrate:
    image: migrate/migrate:v4.17.1
    # OBS: använder DATABASE_URL från environment/.env om du sätter den
    command: ["-path", "/migrations", "-database", "${DATABASE_URL}?sslmode=disable", "up"]
    volumes:
      - ./db/migrations:/migrations:ro
    depends_on:
      db:
        condition: service_healthy
    # Kör bara när vi ber om det (via compose run) eller vid up; startar, kör, exitar
    restart: "on-failure"

volumes:
  db_data:
